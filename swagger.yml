swagger: "2.0"
info:
  description: "This is the BE API of the application Grulo."
  version: "1.0.0"
  title: "Grulo Backed REST API"
  contact:
    email: "dantc12@gmail.com"
host: "grulo.io"
basePath: "/api"
tags:
  - name: "user"
    description: "Operations regarding users of Grulo"
  - name: "group"
    description: "Operations regarding the groups in Grulo"
  - name: "posts"
    description: "Operations regarding the different posts in Grulo"
  - name: "misc."
    description: "misc."
schemes:
  - "https"
  - "http"
paths:
  /is_alive:
    get:
      tags:
        - "misc."
      summary: "Check that the BE server is alive"
      description: ""
      operationId: "app.views.authentication.is_alive.is_alive"
      responses:
        "200":
          description: "server is alive"
  /user/login:
    post:
      tags:
        - "user"
      summary: "Login into Grulo"
      description: ""
      operationId: "app.views.authentication.login_resource.login"
      parameters:
        - in: "body"
          name: "login_info"
          description: "login information: username and password"
          required: true
          schema:
            type: "object"
            required:
              - user_name
              - password
            properties:
              user_name:
                type: "string"
              password:
                type: "string"
      responses:
        "500":
          description: "Username or password were incorrect"
          schema:
            $ref: "#/definitions/ErrorMessage"
        "200":
          description: "login successful. gets a session ID"
          schema:
            type: "object"
            properties:
              session_id:
                type: "string"
  /user:
    post:
      tags:
        - "user"
      summary: "Sign up to Grulo"
      description: ""
      operationId: "app.views.authentication.sign_up_resource.sign_up"
      parameters:
        - in: "body"
          name: "sign_up_info"
          description: "signup full information"
          required: true
          schema:
            type: "object"
            required:
              - user_name
              - password
              - email
              - address
            properties:
              user_name:
                type: "string"
              password:
                type: "string"
              email:
                type: "string"
              address:
                type: "string"
              first_name:
                type: "string"
              last_name:
                type: "string"
              birthday:
                type: "string"
              phone_number:
                type: "string"
              gender:
                type: "string"
              bio:
                type: "string"
      responses:
        "500":
          description: "Bad input was inserted"
          schema:
            $ref: "#/definitions/ErrorMessage"
        "200":
          description: "sign up was successful. user was created"
  /user/logout:
    post:
      tags:
        - "user"
      summary: "Logout from Grulo"
      description: ""
      operationId: "app.views.authentication.logout_resource.logout"
      parameters:
        - in: "body"
          name: "logout_info"
          description: "logout information: the session ID"
          required: true
          schema:
            type: "object"
            required:
              - session_id
            properties:
              session_id:
                type: "string"
      responses:
        "200":
          description: "logout successful."
  /posts:
    get:
      tags:
        - "posts"
      summary: "Get all posts that are relevant to the connected user"
      description: "Returns all posts from the groups the user is a member of."
      operationId: "app.views.posts_resources.posts_resource.get_posts_for_user"
      parameters:
        - name: "session_id"
          in: "query"
          description: "The connected user's session ID"
          required: true
          type: "string"
        - name: "limit"
          in: "query"
          description: "An optional limit to the amount of posts returned"
          required: false
          type: "integer"
      responses:
        "200":
          description: "Got all relevant posts for the user (might be zero though)"
          schema:
            type: "object"
            properties:
              posts:
                type: "array"
                items:
                  $ref: "#/definitions/Post"
    post:
      tags:
        - "posts"
      summary: "Create a new post ('post' a post)"
      description: ""
      operationId: "app.views.posts_resources.posts_resource.create_post"
      parameters:
        - in: "body"
          name: "body"
          description: "new post data with attached session ID"
          required: true
          schema:
            type: "object"
            required:
              - session_id
              - group_name
              - text
            properties:
              session_id:
                type: "string"
              group_name:
                type: "string"
              text:
                type: "string"
      responses:
        "500":
          description: "Requested group doesn't exist"
          schema:
            $ref: "#/definitions/ErrorMessage"
        "200":
          description: "created new post."
  # /pet/{petId}:
  #   get:
  #     tags:
  #     - "pet"
  #     summary: "Find pet by ID"
  #     description: "Returns a single pet"
  #     operationId: "getPetById"
  #     produces:
  #     - "application/xml"
  #     - "application/json"
  #     parameters:
  #     - name: "petId"
  #       in: "path"
  #       description: "ID of pet to return"
  #       required: true
  #       type: "integer"
  #       format: "int64"
  #     responses:
  #       "200":
  #         description: "successful operation"
  #         schema:
  #           $ref: "#/definitions/Pet"
  #       "400":
  #         description: "Invalid ID supplied"
  #       "404":
  #         description: "Pet not found"
  #     security:
  #     - api_key: []
  #   post:
  #     tags:
  #     - "pet"
  #     summary: "Updates a pet in the store with form data"
  #     description: ""
  #     operationId: "updatePetWithForm"
  #     consumes:
  #     - "application/x-www-form-urlencoded"
  #     produces:
  #     - "application/xml"
  #     - "application/json"
  #     parameters:
  #     - name: "petId"
  #       in: "path"
  #       description: "ID of pet that needs to be updated"
  #       required: true
  #       type: "integer"
  #       format: "int64"
  #     - name: "name"
  #       in: "formData"
  #       description: "Updated name of the pet"
  #       required: false
  #       type: "string"
  #     - name: "status"
  #       in: "formData"
  #       description: "Updated status of the pet"
  #       required: false
  #       type: "string"
  #     responses:
  #       "405":
  #         description: "Invalid input"
  #     security:
  #     - petstore_auth:
  #       - "write:pets"
  #       - "read:pets"
  #   delete:
  #     tags:
  #     - "pet"
  #     summary: "Deletes a pet"
  #     description: ""
  #     operationId: "deletePet"
  #     produces:
  #     - "application/xml"
  #     - "application/json"
  #     parameters:
  #     - name: "api_key"
  #       in: "header"
  #       required: false
  #       type: "string"
  #     - name: "petId"
  #       in: "path"
  #       description: "Pet id to delete"
  #       required: true
  #       type: "integer"
  #       format: "int64"
  #     responses:
  #       "400":
  #         description: "Invalid ID supplied"
  #       "404":
  #         description: "Pet not found"
  #     security:
  #     - petstore_auth:
  #       - "write:pets"
  #       - "read:pets"
  # /pet/{petId}/uploadImage:
  #   post:
  #     tags:
  #     - "pet"
  #     summary: "uploads an image"
  #     description: ""
  #     operationId: "uploadFile"
  #     consumes:
  #     - "multipart/form-data"
  #     produces:
  #     - "application/json"
  #     parameters:
  #     - name: "petId"
  #       in: "path"
  #       description: "ID of pet to update"
  #       required: true
  #       type: "integer"
  #       format: "int64"
  #     - name: "additionalMetadata"
  #       in: "formData"
  #       description: "Additional data to pass to server"
  #       required: false
  #       type: "string"
  #     - name: "file"
  #       in: "formData"
  #       description: "file to upload"
  #       required: false
  #       type: "file"
  #     responses:
  #       "200":
  #         description: "successful operation"
  #         schema:
  #           $ref: "#/definitions/ApiResponse"
  #     security:
  #     - petstore_auth:
  #       - "write:pets"
  #       - "read:pets"
  # /store/inventory:
  #   get:
  #     tags:
  #     - "store"
  #     summary: "Returns pet inventories by status"
  #     description: "Returns a map of status codes to quantities"
  #     operationId: "getInventory"
  #     produces:
  #     - "application/json"
  #     parameters: []
  #     responses:
  #       "200":
  #         description: "successful operation"
  #         schema:
  #           type: "object"
  #           additionalProperties:
  #             type: "integer"
  #             format: "int32"
  #     security:
  #     - api_key: []
  # /store/order:
  #   post:
  #     tags:
  #     - "store"
  #     summary: "Place an order for a pet"
  #     description: ""
  #     operationId: "placeOrder"
  #     produces:
  #     - "application/xml"
  #     - "application/json"
  #     parameters:
  #     - in: "body"
  #       name: "body"
  #       description: "order placed for purchasing the pet"
  #       required: true
  #       schema:
  #         $ref: "#/definitions/Order"
  #     responses:
  #       "200":
  #         description: "successful operation"
  #         schema:
  #           $ref: "#/definitions/Order"
  #       "400":
  #         description: "Invalid Order"
  # /store/order/{orderId}:
  #   get:
  #     tags:
  #     - "store"
  #     summary: "Find purchase order by ID"
  #     description: "For valid response try integer IDs with value >= 1 and <= 10.         Other values will generated exceptions"
  #     operationId: "getOrderById"
  #     produces:
  #     - "application/xml"
  #     - "application/json"
  #     parameters:
  #     - name: "orderId"
  #       in: "path"
  #       description: "ID of pet that needs to be fetched"
  #       required: true
  #       type: "integer"
  #       maximum: 10.0
  #       minimum: 1.0
  #       format: "int64"
  #     responses:
  #       "200":
  #         description: "successful operation"
  #         schema:
  #           $ref: "#/definitions/Order"
  #       "400":
  #         description: "Invalid ID supplied"
  #       "404":
  #         description: "Order not found"
  #   delete:
  #     tags:
  #     - "store"
  #     summary: "Delete purchase order by ID"
  #     description: "For valid response try integer IDs with positive integer value.         Negative or non-integer values will generate API errors"
  #     operationId: "deleteOrder"
  #     produces:
  #     - "application/xml"
  #     - "application/json"
  #     parameters:
  #     - name: "orderId"
  #       in: "path"
  #       description: "ID of the order that needs to be deleted"
  #       required: true
  #       type: "integer"
  #       minimum: 1.0
  #       format: "int64"
  #     responses:
  #       "400":
  #         description: "Invalid ID supplied"
  #       "404":
  #         description: "Order not found"
  # /user:
  #   post:
  #     tags:
  #     - "user"
  #     summary: "Create user"
  #     description: "This can only be done by the logged in user."
  #     operationId: "createUser"
  #     produces:
  #     - "application/xml"
  #     - "application/json"
  #     parameters:
  #     - in: "body"
  #       name: "body"
  #       description: "Created user object"
  #       required: true
  #       schema:
  #         $ref: "#/definitions/User"
  #     responses:
  #       default:
  #         description: "successful operation"
  # /user/createWithArray:
  #   post:
  #     tags:
  #     - "user"
  #     summary: "Creates list of users with given input array"
  #     description: ""
  #     operationId: "createUsersWithArrayInput"
  #     produces:
  #     - "application/xml"
  #     - "application/json"
  #     parameters:
  #     - in: "body"
  #       name: "body"
  #       description: "List of user object"
  #       required: true
  #       schema:
  #         type: "array"
  #         items:
  #           $ref: "#/definitions/User"
  #     responses:
  #       default:
  #         description: "successful operation"
  # /user/createWithList:
  #   post:
  #     tags:
  #     - "user"
  #     summary: "Creates list of users with given input array"
  #     description: ""
  #     operationId: "createUsersWithListInput"
  #     produces:
  #     - "application/xml"
  #     - "application/json"
  #     parameters:
  #     - in: "body"
  #       name: "body"
  #       description: "List of user object"
  #       required: true
  #       schema:
  #         type: "array"
  #         items:
  #           $ref: "#/definitions/User"
  #     responses:
  #       default:
  #         description: "successful operation"
  # /user/login:
  #   get:
  #     tags:
  #     - "user"
  #     summary: "Logs user into the system"
  #     description: ""
  #     operationId: "loginUser"
  #     produces:
  #     - "application/xml"
  #     - "application/json"
  #     parameters:
  #     - name: "username"
  #       in: "query"
  #       description: "The user name for login"
  #       required: true
  #       type: "string"
  #     - name: "password"
  #       in: "query"
  #       description: "The password for login in clear text"
  #       required: true
  #       type: "string"
  #     responses:
  #       "200":
  #         description: "successful operation"
  #         schema:
  #           type: "string"
  #         headers:
  #           X-Rate-Limit:
  #             type: "integer"
  #             format: "int32"
  #             description: "calls per hour allowed by the user"
  #           X-Expires-After:
  #             type: "string"
  #             format: "date-time"
  #             description: "date in UTC when token expires"
  #       "400":
  #         description: "Invalid username/password supplied"
  # /user/logout:
  #   get:
  #     tags:
  #     - "user"
  #     summary: "Logs out current logged in user session"
  #     description: ""
  #     operationId: "logoutUser"
  #     produces:
  #     - "application/xml"
  #     - "application/json"
  #     parameters: []
  #     responses:
  #       default:
  #         description: "successful operation"
  # /user/{username}:
  #   get:
  #     tags:
  #     - "user"
  #     summary: "Get user by user name"
  #     description: ""
  #     operationId: "getUserByName"
  #     produces:
  #     - "application/xml"
  #     - "application/json"
  #     parameters:
  #     - name: "username"
  #       in: "path"
  #       description: "The name that needs to be fetched. Use user1 for testing. "
  #       required: true
  #       type: "string"
  #     responses:
  #       "200":
  #         description: "successful operation"
  #         schema:
  #           $ref: "#/definitions/User"
  #       "400":
  #         description: "Invalid username supplied"
  #       "404":
  #         description: "User not found"
  #   put:
  #     tags:
  #     - "user"
  #     summary: "Updated user"
  #     description: "This can only be done by the logged in user."
  #     operationId: "updateUser"
  #     produces:
  #     - "application/xml"
  #     - "application/json"
  #     parameters:
  #     - name: "username"
  #       in: "path"
  #       description: "name that need to be updated"
  #       required: true
  #       type: "string"
  #     - in: "body"
  #       name: "body"
  #       description: "Updated user object"
  #       required: true
  #       schema:
  #         $ref: "#/definitions/User"
  #     responses:
  #       "400":
  #         description: "Invalid user supplied"
  #       "404":
  #         description: "User not found"
  #   delete:
  #     tags:
  #     - "user"
  #     summary: "Delete user"
  #     description: "This can only be done by the logged in user."
  #     operationId: "deleteUser"
  #     produces:
  #     - "application/xml"
  #     - "application/json"
  #     parameters:
  #     - name: "username"
  #       in: "path"
  #       description: "The name that needs to be deleted"
  #       required: true
  #       type: "string"
  #     responses:
  #       "400":
  #         description: "Invalid username supplied"
  #       "404":
  #         description: "User not found"
# securityDefinitions:
#   petstore_auth:
#     type: "oauth2"
#     authorizationUrl: "http://petstore.swagger.io/oauth/dialog"
#     flow: "implicit"
#     scopes:
#       write:pets: "modify pets in your account"
#       read:pets: "read your pets"
#   api_key:
#     type: "apiKey"
#     name: "api_key"
#     in: "header"
definitions:
  ErrorMessage:
    type: "object"
    properties:
      message:
        type: "string"
  Post:
    type: "object"
    properties:
      post_id:
        type: "integer"
      user_name:
        type: "string"
      group_name:
        type: "string"
      text:
        type: "string"
      post_date:
        type: "string"
        format: "date-time"
      last_update:
        type: "string"
        format: "date-time"
      comments:
        type: "array"
        items:
          type: "string"
#   Order:
#     type: "object"
#     properties:
#       id:
#         type: "integer"
#         format: "int64"
#       petId:
#         type: "integer"
#         format: "int64"
#       quantity:
#         type: "integer"
#         format: "int32"
#       shipDate:
#         type: "string"
#         format: "date-time"
#       status:
#         type: "string"
#         description: "Order Status"
#         enum:
#         - "placed"
#         - "approved"
#         - "delivered"
#       complete:
#         type: "boolean"
#         default: false
#     xml:
#       name: "Order"
#   Category:
#     type: "object"
#     properties:
#       id:
#         type: "integer"
#         format: "int64"
#       name:
#         type: "string"
#     xml:
#       name: "Category"
#   User:
#     type: "object"
#     properties:
#       id:
#         type: "integer"
#         format: "int64"
#       username:
#         type: "string"
#       firstName:
#         type: "string"
#       lastName:
#         type: "string"
#       email:
#         type: "string"
#       password:
#         type: "string"
#       phone:
#         type: "string"
#       userStatus:
#         type: "integer"
#         format: "int32"
#         description: "User Status"
#     xml:
#       name: "User"
#   Tag:
#     type: "object"
#     properties:
#       id:
#         type: "integer"
#         format: "int64"
#       name:
#         type: "string"
#     xml:
#       name: "Tag"
#   Pet:
#     type: "object"
#     required:
#     - "name"
#     - "photoUrls"
#     properties:
#       id:
#         type: "integer"
#         format: "int64"
#       category:
#         $ref: "#/definitions/Category"
#       name:
#         type: "string"
#         example: "doggie"
#       photoUrls:
#         type: "array"
#         xml:
#           name: "photoUrl"
#           wrapped: true
#         items:
#           type: "string"
#       tags:
#         type: "array"
#         xml:
#           name: "tag"
#           wrapped: true
#         items:
#           $ref: "#/definitions/Tag"
#       status:
#         type: "string"
#         description: "pet status in the store"
#         enum:
#         - "available"
#         - "pending"
#         - "sold"
#     xml:
#       name: "Pet"
#   ApiResponse:
#     type: "object"
#     properties:
#       code:
#         type: "integer"
#         format: "int32"
#       type:
#         type: "string"
#       message:
#         type: "string"
# externalDocs:
#   description: "Find out more about Swagger"
#   url: "http://swagger.io"